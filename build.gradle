plugins {
    id 'java'
    id 'jacoco'
    id 'war'
    id 'application'
}

group = 'threemen.back'
version = '1.0-SNAPSHOT'

application {
    mainClass = 'EmbeddedTomcat' // 🚀 실행할 Main 클래스 지정
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.apache.logging.log4j:log4j-core:2.17.1'
    implementation 'org.apache.logging.log4j:log4j-api:2.17.1'

    implementation 'com.h2database:h2:2.2.224'
//    runtimeOnly 'com.h2database:h2'
    implementation 'org.apache.groovy:groovy:4.0.14'
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    testImplementation 'org.mockito:mockito-core:4.11.0'
    testImplementation 'org.mockito:mockito-inline:4.11.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:2.23.0'

    implementation 'org.apache.tomcat.embed:tomcat-embed-core:10.1.16'
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper:10.1.16'

    // Servlet API (톰캣이 제공하므로 providedCompile 사용)
    implementation 'jakarta.servlet:jakarta.servlet-api:5.0.0'

    // JSP 및 JSTL 지원
    implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl:3.0.1'


    // MySQL JDBC 드라이버
    implementation 'com.mysql:mysql-connector-j:9.2.0'

    implementation 'org.json:json:20240205'
    implementation 'org.slf4j:slf4j-api:2.0.9'
    implementation 'ch.qos.logback:logback-classic:1.4.14'

    // JSTL 태그 라이브러리
    implementation 'org.apache.taglibs:taglibs-standard-impl:1.2.5'
    implementation 'org.apache.taglibs:taglibs-standard-spec:1.2.5'
}

jacoco{
    toolVersion = "0.8.12"
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport{
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = false
        csv.required = false
        html.required = true
        html.destination file("${buildDir}/jacocoHtml")
    }
}

check {
    dependsOn jacocoTestReport
}

tasks.register('applicationCodeConverage', JacocoReport){
    executionData fileTree(dir: "$buildDir", includes: ['jacoco/test.exec'])
    sourceSets sourceSets.main
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.war {
    archiveFileName = "manitto-webapp.war"
}